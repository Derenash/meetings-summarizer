So, you see, right, when we're talking about using Flutter in a project, it's like, you gotta understand Dart, right? Dart's the foundation of Flutter, so you gotta be comfortable with it to make the most out of Flutter. You know, Dart is a client-optimized language for fast apps on any platform, so it's really important to get a good grasp of it. It's not just about knowing the syntax, but also understanding the concepts, the principles, the way it works, right? Now, when it comes to structuring your codebase, it's like, you gotta keep it well-organized. This is key for maintainability and scalability of the project, right? So, you want to make sure that your code is clean, modular, and easy to understand. This way, if you need to scale up your project or if someone else needs to work on it, they won't have a hard time navigating through your code. You know, it's like, you gotta think about the future, right? You gotta think about how your code will evolve over time, how it will adapt to new requirements, new features, new technologies. Now, I'm not sure what the current situation is with your project or if you're already following these practices. But these are some of the things that I would look at while exploring the feasibility of using Flutter in a project. Now, Flutter does have its own set of challenges, right? For instance, it might not be the best choice for projects that require heavy use of native features. But it's still a powerful tool for developing beautiful, natively compiled applications for mobile, web, and desktop from a single codebase. So, if you're looking to develop a cross-platform application, Flutter could be a great choice. And maybe it would make sense to have a simpler syntax for expressing those constraints that might also be compilable to Dart, but might have a more canonical normal form. Yeah. So that definitely adds a layer to the research and development of it. But I think that if we can demonstrate that it works for... Say we demonstrate it works for some simpler model, that's a good step towards a proof of concept. And what's interesting is that you could actually publish your own algorithms to help other people understand your code better. And then you're more likely to have your project completed quicker. If you're publishing, hey, use this algorithm. It'll really help you understand my code or something. And this type of thing is actually not fully original, this sort of publishing so-called hints. For example, in open-source projects, developers often leave comments or documentation to help others understand their code. And you know, it's not just about writing code, it's also about communicating your ideas, your solutions, your algorithms to others. It's about collaboration, it's about teamwork, it's about building something together. So, yeah, using Flutter in a project, it's not just a technical decision, it's also a strategic decision, a business decision. It's about choosing the right tool for the job, the right technology for your needs, the right platform for your audience. And that's why it's so important to understand the pros and cons, the strengths and weaknesses, the opportunities and challenges of using Flutter in a project.